{"git":"http://github.com/euvl/vue-js-modal","version":"1.3.12","description":"基于Vue自适应弹出框","browser":"../../lib/site/static/img/browser/ie10.png","type":3,"url":"http://vue-js-modal.yev.io/","name":"vue-js-modal","markdown":"<p align=\"center\">\n\n# Vue.js modal\n\n<a href=\"https://badge.fury.io/js/vue-js-modal\"><img src=\"https://badge.fury.io/js/vue-js-modal.svg\" alt=\"npm version\"></a>\n<a href=\"https://www.npmjs.com/package/vue-js-modal\"><img src=\"https://img.shields.io/npm/dm/vue-js-modal.svg\" alt=\"npm\"></a>\n\n<p align=\"right\">\n  <a href=\"https://www.buymeacoffee.com/yev\" target=\"_blank\">\n  <img width=\"200\" alt=\"screen shot 2018-03-01 at 10 33 39\" src=\"https://user-images.githubusercontent.com/1577802/36840220-21beb89c-1d3c-11e8-98a4-45fc334842cf.png\">\n  </a>\n</p>\n\n<h5 id=\"simple-to-use-highly-customizable-mobile-friendly-vue-js-2-0-modal-with-ssr-support-http-vue-js-modal-yev-io-\">Simple to use, highly customizable, mobile friendly Vue.js 2.0+ modal with SSR support. <a href=\"http://vue-js-modal.yev.io/\">http://vue-js-modal.yev.io/</a></h5>\n<p><a href=\"https://medium.com/@yev_dev/vue-js-modal-changelog-61f934691b67\" title=\"Medium\">Changelog on Medium</a></p>\n<p></p></p>\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/3oKIPco1eNxAA1rD4Q/giphy.gif\">\n</p>\n\n<p>Demo: <a href=\"http://vue-js-modal.yev.io/\">http://vue-js-modal.yev.io/</a></p>\n<h3 id=\"install\">Install</h3>\n<pre><code class=\"lang-bash\">npm install vue-js-modal --save\n</code></pre>\n<h3 id=\"how-to-use\">How to use</h3>\n<p>Include plugin in your <code>main.js</code> file.</p>\n<pre><code class=\"lang-javascript\">import VModal from &#39;vue-js-modal&#39;\n\nVue.use(VModal)\n\n/*\nBy default plugin will use &quot;modal&quot; name for the component.\nIf you need to change it, you can do so by providing &quot;componentName&quot; param.\n\nExample:\n\nVue.use(VModal, { componentName: &quot;foo-modal&quot; })\n...\n&lt;foo-modal name=&quot;bar&quot;&gt;&lt;/foo-modal&gt;\n*/\n</code></pre>\n<p>Create modal:</p>\n<pre><code class=\"lang-vue\">&lt;modal name=&quot;hello-world&quot;&gt;\n  hello, world!\n&lt;/modal&gt;\n</code></pre>\n<p>Call it from anywhere in the app:</p>\n<pre><code class=\"lang-javascript\">methods: {\n  show () {\n    this.$modal.show(&#39;hello-world&#39;);\n  },\n  hide () {\n    this.$modal.hide(&#39;hello-world&#39;);\n  }\n}\n</code></pre>\n<hr>\n<p>You can easily send data into the modal:</p>\n<pre><code class=\"lang-javascript\">this.$modal.show(&#39;hello-world&#39;, { foo: &#39;bar&#39; })\n</code></pre>\n<p>And receive it in <code>beforeOpen</code> event handler:</p>\n<pre><code class=\"lang-vue\">&lt;modal name=&quot;hello-world&quot; @before-open=&quot;beforeOpen&quot;/&gt;\n</code></pre>\n<pre><code class=\"lang-javascript\">methods: {\n  beforeOpen (event) {\n    console.log(event.params.foo);\n  }\n}\n</code></pre>\n<p>If you use <strong>Bower</strong> package manager - you will have to initialize library differently:</p>\n<pre><code class=\"lang-js\">Vue.use(window[&quot;vue-js-modal&quot;].default);\n</code></pre>\n<h3 id=\"dialog\">Dialog</h3>\n<p>It is a simplified version of the modal, which has most parameters set by default and is pretty useful for quick prototyping, showing alerts or creating mobile-like modals.</p>\n<p>To start using <code>&lt;v-dialog/&gt;</code> you must set <code>dialog: true</code> in plugin configuration:</p>\n<pre><code class=\"lang-js\">Vue.use(VModal, { dialog: true })\n</code></pre>\n<p>And include it in your project:</p>\n<pre><code class=\"lang-vue\">&lt;v-dialog/&gt;\n</code></pre>\n<p>Call it (all params except of “text” are optional):</p>\n<pre><code class=\"lang-javascript\">this.$modal.show(&#39;dialog&#39;, {\n  title: &#39;Alert!&#39;,\n  text: &#39;You are too awesome&#39;,\n  buttons: [\n    {\n      title: &#39;Deal with it&#39;,\n      handler: () =&gt; { alert(&#39;Woot!&#39;) }\n    },\n    {\n      title: &#39;&#39;,       // Button title\n      default: true,    // Will be triggered by default if &#39;Enter&#39; pressed.\n      handler: () =&gt; {} // Button click handler\n    },\n    {\n      title: &#39;Close&#39;\n    }\n ]\n})\n</code></pre>\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/1577802/29165216-ec62552c-7db9-11e7-807e-ef341edcc94d.png\">\n</p>\n\n<h3 id=\"dynamic-modals\">Dynamic Modals</h3>\n<p>In order to instantiate modals at runtime (for lazy-loading or decluttering templates), it is possible to create modals dynamically.</p>\n<p>To start using this feature you must set <code>dynamic: true</code> in plugin configuration:</p>\n<pre><code class=\"lang-js\">Vue.use(VModal, { dynamic: true })\n</code></pre>\n<p>And include the <code>&lt;modals-container/&gt;</code> component it in your project:</p>\n<pre><code class=\"lang-vue\">&lt;modals-container/&gt;\n</code></pre>\n<p>Call it (the first argument is the component definition, the second are component properties, and the third modal parameters):</p>\n<pre><code class=\"lang-javascript\">this.$modal.show({\n  template: `\n    &lt;div&gt;\n      &lt;h1&gt;This is created inline&lt;/h1&gt;\n      &lt;p&gt;{{ text }}&lt;/p&gt;\n    &lt;/div&gt;\n  `,\n  props: [&#39;text&#39;]\n}, {\n  text: &#39;This text is passed as a property&#39;\n})\n</code></pre>\n<p>It can also be used with <code>.vue</code> files:</p>\n<pre><code class=\"lang-javascript\">import MyComponent from &#39;./MyComponent.vue&#39;\n\nthis.$modal.show(MyComponent, {\n  text: &#39;This text is passed as a property&#39;\n}, {\n  draggable: true\n})\n</code></pre>\n<p>Other than defining the <code>name</code> modal parameter, it&#39;s also possible to close dynamic modals emitting a <code>&#39;close&#39;</code> event:</p>\n<pre><code class=\"lang-javascript\">this.$modal.show({\n  template: `\n    &lt;div&gt;\n      &lt;p&gt;Close using this button:&lt;/p&gt;\n      &lt;button @click=&quot;$emit(&#39;close&#39;)&quot;&gt;Close&lt;/button&gt;\n    &lt;/div&gt;\n  `\n})\n</code></pre>\n<p>For more examples please take a look at <a href=\"http://vue-js-modal.yev.io\">vue-js-modal.yev.io</a>.</p>\n<p><strong>Note:</strong> keep in mind that there are some limitations for using dynamic modals. If you need full functionality then use ordinary modal instead.</p>\n<h3 id=\"ssr\">SSR</h3>\n<p>Include plugin in your <code>nuxt.config.js</code> file:</p>\n<pre><code class=\"lang-javascript\">module.exports = {\n  plugins: [&#39;~plugins/vue-js-modal&#39;]\n}\n</code></pre>\n<p>And your <code>plugins/vue-js-modal.js</code> will look like:</p>\n<pre><code class=\"lang-javascript\">import Vue from &#39;vue&#39;\nimport VModal from &#39;vue-js-modal/dist/ssr.index&#39;\n\nVue.use(VModal)\n</code></pre>\n<p>For full demo please look at <code>demo/server_side_rendering</code></p>\n<h3 id=\"extracted-css\">Extracted CSS</h3>\n<p>There is also a ssr build with css file extracted. Take a look in /dist folder.</p>\n<h3 id=\"properties\">Properties</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Required</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>true</td>\n<td>[String, Number]</td>\n<td></td>\n<td>Name of the modal</td>\n</tr>\n<tr>\n<td>delay</td>\n<td>false</td>\n<td>Number</td>\n<td>0</td>\n<td>Delay between showing overlay and actual modal box</td>\n</tr>\n<tr>\n<td>resizable</td>\n<td>false</td>\n<td>Boolean</td>\n<td>false</td>\n<td>If true, allows to resize modal window, keeping it in the center of the screen.</td>\n</tr>\n<tr>\n<td>adaptive</td>\n<td>false</td>\n<td>Boolean</td>\n<td>false</td>\n<td>If true, modal box will try to adapt to the window size</td>\n</tr>\n<tr>\n<td>draggable</td>\n<td>false</td>\n<td>[Boolean, String]</td>\n<td>false</td>\n<td>If true, modal box will be draggable.</td>\n</tr>\n<tr>\n<td>scrollable</td>\n<td>false</td>\n<td>Boolean</td>\n<td>false</td>\n<td>If <code>height</code> property is <code>auto</code> and the modal height exceeds window height - you will be able to scroll modal</td>\n</tr>\n<tr>\n<td>reset</td>\n<td>false</td>\n<td>Boolean</td>\n<td>false</td>\n<td>Resets position and size before showing modal</td>\n</tr>\n<tr>\n<td>clickToClose</td>\n<td>false</td>\n<td>Boolean</td>\n<td>true</td>\n<td>If set to <code>false</code>, it will not be possible to close modal by clicking on the background</td>\n</tr>\n<tr>\n<td>transition</td>\n<td>false</td>\n<td>String</td>\n<td></td>\n<td>Transition name</td>\n</tr>\n<tr>\n<td>classes</td>\n<td>false</td>\n<td>[String, Array]</td>\n<td>&#39;v--modal&#39;</td>\n<td>Classes that will be applied to the actual modal box, if not specified, the default &#39;vue--modal&#39; class will be applied</td>\n</tr>\n<tr>\n<td>width</td>\n<td>false</td>\n<td>[String, Number]</td>\n<td>600</td>\n<td>Width in pixels or percents (e.g. 50 or &quot;50px&quot;, &quot;50%&quot;)</td>\n</tr>\n<tr>\n<td>height</td>\n<td>false</td>\n<td>[String, Number]</td>\n<td>300</td>\n<td>Height in pixels or percents (e.g. 50 or &quot;50px&quot;, &quot;50%&quot;) or <code>&quot;auto&quot;</code></td>\n</tr>\n<tr>\n<td>minWidth</td>\n<td>false</td>\n<td>Number (px)</td>\n<td>0</td>\n<td>The minimum width to which modal can be resized</td>\n</tr>\n<tr>\n<td>minHeight</td>\n<td>false</td>\n<td>Number (px)</td>\n<td>0</td>\n<td>The minimum height to which modal can be resized</td>\n</tr>\n<tr>\n<td>maxWidth</td>\n<td>false</td>\n<td>Number (px)</td>\n<td>Infinity</td>\n<td>The maximum width of the modal (if the value is greater than window width, window width will be used instead</td>\n</tr>\n<tr>\n<td>maxHeight</td>\n<td>false</td>\n<td>Number (px)</td>\n<td>Infinity</td>\n<td>The maximum height of the modal (if the value is greater than window height, window height will be used instead</td>\n</tr>\n<tr>\n<td>pivotX</td>\n<td>false</td>\n<td>Number (0 - 1.0)</td>\n<td>0.5</td>\n<td>Horizontal position in %, default is 0.5 (meaning that modal box will be in the middle (50% from left) of the window</td>\n</tr>\n<tr>\n<td>pivotY</td>\n<td>false</td>\n<td>Number (0 - 1.0)</td>\n<td>0.5</td>\n<td>Vertical position in %, default is 0.5 (meaning that modal box will be in the middle (50% from top) of the window</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"events\">Events</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>before-open</td>\n<td>Emits while modal is still invisible, but was added to the DOM</td>\n</tr>\n<tr>\n<td>opened</td>\n<td>Emits after modal became visible or started transition</td>\n</tr>\n<tr>\n<td>before-close</td>\n<td>Emits before modal is going to be closed. Can be stopped from the event listener calling <code>event.stop()</code> (example: you are creating a text editor, and want to stop closisng and ask user to correct mistakes if text is not valid)</td>\n</tr>\n<tr>\n<td>closed</td>\n<td>Emits right before modal is destoyed</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre><code class=\"lang-vue\">&lt;template&gt;\n  &lt;modal name=&quot;example&quot;\n         :width=&quot;300&quot;\n         :height=&quot;300&quot;\n         @before-open=&quot;beforeOpen&quot;\n         @before-close=&quot;beforeClose&quot;&gt;\n    &lt;b&gt;{{time}}&lt;/b&gt;\n  &lt;/modal&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n  name: &#39;ExampleModal&#39;,\n  data () {\n    return {\n      time: 0,\n      duration: 5000\n    }\n  },\n  methods: {\n    beforeOpen (event) {\n      console.log(event)\n      // Set the opening time of the modal\n      this.time = Date.now()\n    },\n    beforeClose (event) {\n      console.log(event)\n      // If modal was open less then 5000 ms - prevent closing it\n      if (this.time + this.duration &lt; Date.now()) {\n        event.stop()\n      }\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>This example, initializes <code>time</code> variable every time the modal is being opened.\nAnd then forbits closing it for the next 5000 ms</p>\n<h3 id=\"other\">Other</h3>\n<h4 id=\"height-auto-\">Height: &quot;auto&quot;</h4>\n<p>From <code>v1.2.6</code> height can be set to &quot;auto&quot;. If you want to be able to scroll modal in case it&#39;s height exceeds window height - you can set flag <code>scrollable=&quot;true&quot;</code>.</p>\n<p>p.s. <code>scrollable</code> will only work with <code>height=&quot;auto&quot;</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-vue\">&lt;modal name=&quot;foo&quot; height=&quot;auto&quot; :scrollable=&quot;true&quot;&gt;...&lt;/modal&gt;\n</code></pre>\n<p>Auto height:</p>\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/xUPGGpEV00RDDDeiuk/giphy.gif\">\n</p>\n\n<p>Scrollable content &amp; auto height:</p>\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/xUn3CfwfH3ISuf4mxq/giphy.gif\">\n</p>\n\n\n<h4 id=\"close-button\">Close button</h4>\n<p>If you want to have a Close (x) button in the top-right corner, you can use &quot;top-right&quot; slot for it. There is deliberately no predefined Close button style - you will have to implement/use your own button.</p>\n<p>Example:</p>\n<pre><code class=\"lang-vue\">&lt;template&gt;\n  &lt;modal name=&quot;foo&quot;&gt;\n\n    &lt;div slot=&quot;top-right&quot;&gt;\n      &lt;button @click=&quot;$modal.hide(&#39;foo&#39;)&quot;&gt;\n        ❌\n      &lt;/button&gt;\n    &lt;/div&gt;\n\n    Hello, ☀️!\n\n  &lt;/modal&gt;\n&lt;/template&gt;\n</code></pre>\n<h4 id=\"draggable-handler\">Draggable handler</h4>\n<p>Draggable property can accept not only <code>Boolean</code> but also <code>String</code> paramenters. With <code>String</code> value, you can specify a CSS selector to the element which will be a &quot;handler&quot; for dragging.</p>\n<p>Example:</p>\n<pre><code class=\"lang-vue\">&lt;modal name=&quot;bar&quot; draggable=&quot;.window-header&quot;&gt;\n  &lt;div class=&quot;window-header&quot;&gt;DRAG ME HERE&lt;/div&gt;\n  &lt;div&gt;\n     Hello, 🌎!\n  &lt;/div&gt;\n&lt;/modal&gt;\n</code></pre>\n<h4 id=\"overlay-background-color\">Overlay background color</h4>\n<p>If you want to change overlay background color, you can easily do it using css.</p>\n<p>For all modals:</p>\n<pre><code class=\"lang-css\">.v--modal-overlay {\n  background: red;\n}\n</code></pre>\n<p>For specific modal:</p>\n<pre><code class=\"lang-css\">.v--modal-overlay[data-modal=&quot;my_modal_name&quot;] {\n  background: transparent;\n}\n</code></pre>\n<h4 id=\"fullscreen\">Fullscreen</h4>\n<pre><code class=\"lang-vue\">&lt;modal name=&quot;fs&quot; :adaptive=&quot;true&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;\nDont forget about close button :)\n&lt;/modal&gt;\n</code></pre>\n<h3 id=\"check-out\">Check out</h3>\n<p>Check out my other projects:</p>\n<ul>\n<li><a href=\"https://github.com/euvl/vue-notification\">https://github.com/euvl/vue-notification</a></li>\n<li><a href=\"https://github.com/euvl/vue-js-toggle-button\">https://github.com/euvl/vue-js-toggle-button</a></li>\n<li><a href=\"https://github.com/euvl/vue-js-popover\">https://github.com/euvl/vue-js-popover</a></li>\n<li><a href=\"https://github.com/euvl/v-clipboard\">https://github.com/euvl/v-clipboard</a></li>\n</ul>\n<h3 id=\"developers\">Developers</h3>\n<p>To run an example:</p>\n<pre><code class=\"lang-sh\"># Clone repo\ngit clone https://github.com/euvl/vue-js-modal.git\n\n# Run unit tests\nnpm run unit\n\n# Run linter\nnpm run lint\n\n# Build main library for client &amp; ssr\ncd vue-js-modal\nnpm install\nnpm run build\n\n# Build and run demo\ncd demo/client_side_rendering\nnpm install\nnpm run dev\n</code></pre>\n","static":"../../lib/site/dist"}