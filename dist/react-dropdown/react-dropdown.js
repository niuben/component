var modules={"module":{"LICENSE":"The MIT License (MIT)\n\nCopyright (c) 2014 xvfeng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","README.md":"react-dropdown\n==============\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][downloads-url]\n\nSimple Dropdown component for React, inspired by [react-select](https://github.com/JedWatson/react-select)\nDemo is available [here](http://fraserxu.me/react-dropdown/)\n\n### Why\n\n* The default HTML select element is hard to style\n* And sometime we also want grouped menus\n* if you want more advanced select, check [react-select](https://github.com/JedWatson/react-select)\n\n### Installation\n\n```\n$ npm install react-dropdown  --save\n```\n\n### Changelog\n\nIf you want to support React version under v0.13, use react-dropdown@v0.6.1\n\n### Usage\n\nFlat Array options\n\n```JavaScript\n\nconst options = [\n  'one', 'two', 'three'\n]\n```\n\nObject Array options\n\n```JavaScript\n\nconst options = [\n  { value: 'one', label: 'One' },\n  { value: 'two', label: 'Two' },\n  {\n   type: 'group', name: 'group1', items: [\n     { value: 'three', label: 'Three' },\n     { value: 'four', label: 'Four' }\n   ]\n  },\n  {\n   type: 'group', name: 'group2', items: [\n     { value: 'five', label: 'Five' },\n     { value: 'six', label: 'Six' }\n   ]\n  }\n]\n```\n\n**Mount**\n\n```JavaScript\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\nconst defaultOption = options[0]\n<Dropdown options={options} onChange={this._onSelect} value={defaultOption} placeholder=\"Select an option\" />\n```\n\n**Disabling the Dropdown**\n\nJust pass a disabled boolean value to the Dropdown to disable it. This will also give you a `.Dropdown-disabled` class on the element, so you can style it yourself.\n\n```JavaScript\n<Dropdown disabled onChange={this._onSelect} value={defaultOption} placeholder=\"Select an option\" />\n```\n\n**Custom className**\n\nThe `className` prop is passed down to the wrapper `div`, which also has the `Dropdown-root` class.\n\n```JavaScript\n<Dropdown className='myClassName' />\n```\n\nCheck more examples in the example folder.\n\n**Run example**\n\n```\n$ npm start\n```\n\n### License\n\nMIT | Build for [CSViz](https://csviz.org) project @[Wiredcraft](http://wiredcraft.com)\n\n[npm-image]: https://img.shields.io/npm/v/react-dropdown.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/react-dropdown\n[downloads-image]: http://img.shields.io/npm/dm/react-dropdown.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/react-dropdown\n","dist":{"index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DEFAULT_PLACEHOLDER_STRING = 'Select...';\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));\n\n    _this.state = {\n      selected: props.value || {\n        label: props.placeholder || DEFAULT_PLACEHOLDER_STRING,\n        value: ''\n      },\n      isOpen: false\n    };\n    _this.mounted = true;\n    _this.handleDocumentClick = _this.handleDocumentClick.bind(_this);\n    _this.fireChangeEvent = _this.fireChangeEvent.bind(_this);\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(newProps) {\n      if (newProps.value && newProps.value !== this.state.selected) {\n        this.setState({ selected: newProps.value });\n      } else if (!newProps.value) {\n        this.setState({ selected: {\n            label: newProps.placeholder || DEFAULT_PLACEHOLDER_STRING,\n            value: ''\n          } });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      document.addEventListener('click', this.handleDocumentClick, false);\n      document.addEventListener('touchend', this.handleDocumentClick, false);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.mounted = false;\n      document.removeEventListener('click', this.handleDocumentClick, false);\n      document.removeEventListener('touchend', this.handleDocumentClick, false);\n    }\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      if (this.props.onFocus && typeof this.props.onFocus === 'function') {\n        this.props.onFocus(this.state.isOpen);\n      }\n      if (event.type === 'mousedown' && event.button !== 0) return;\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (!this.props.disabled) {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n    }\n  }, {\n    key: 'setValue',\n    value: function setValue(value, label) {\n      var newState = {\n        selected: {\n          value: value,\n          label: label\n        },\n        isOpen: false\n      };\n      this.fireChangeEvent(newState);\n      this.setState(newState);\n    }\n  }, {\n    key: 'fireChangeEvent',\n    value: function fireChangeEvent(newState) {\n      if (newState.selected !== this.state.selected && this.props.onChange) {\n        this.props.onChange(newState.selected);\n      }\n    }\n  }, {\n    key: 'renderOption',\n    value: function renderOption(option) {\n      var _classNames;\n\n      var optionClass = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, this.props.baseClassName + '-option', true), _defineProperty(_classNames, 'is-selected', option === this.state.selected), _classNames));\n\n      var value = option.value || option.label || option;\n      var label = option.label || option.value || option;\n\n      return _react2.default.createElement(\n        'div',\n        {\n          key: value,\n          className: optionClass,\n          onMouseDown: this.setValue.bind(this, value, label),\n          onClick: this.setValue.bind(this, value, label) },\n        label\n      );\n    }\n  }, {\n    key: 'buildMenu',\n    value: function buildMenu() {\n      var _this2 = this;\n\n      var _props = this.props,\n          options = _props.options,\n          baseClassName = _props.baseClassName;\n\n      var ops = options.map(function (option) {\n        if (option.type === 'group') {\n          var groupTitle = _react2.default.createElement(\n            'div',\n            { className: baseClassName + '-title' },\n            option.name\n          );\n          var _options = option.items.map(function (item) {\n            return _this2.renderOption(item);\n          });\n\n          return _react2.default.createElement(\n            'div',\n            { className: baseClassName + '-group', key: option.name },\n            groupTitle,\n            _options\n          );\n        } else {\n          return _this2.renderOption(option);\n        }\n      });\n\n      return ops.length ? ops : _react2.default.createElement(\n        'div',\n        { className: baseClassName + '-noresults' },\n        'No options found'\n      );\n    }\n  }, {\n    key: 'handleDocumentClick',\n    value: function handleDocumentClick(event) {\n      if (this.mounted) {\n        if (!_reactDom2.default.findDOMNode(this).contains(event.target)) {\n          this.setState({ isOpen: false });\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames2;\n\n      var _props2 = this.props,\n          baseClassName = _props2.baseClassName,\n          className = _props2.className;\n\n\n      var disabledClass = this.props.disabled ? 'Dropdown-disabled' : '';\n      var placeHolderValue = typeof this.state.selected === 'string' ? this.state.selected : this.state.selected.label;\n      var value = _react2.default.createElement(\n        'div',\n        { className: baseClassName + '-placeholder' },\n        placeHolderValue\n      );\n      var menu = this.state.isOpen ? _react2.default.createElement(\n        'div',\n        { className: baseClassName + '-menu' },\n        this.buildMenu()\n      ) : null;\n\n      var dropdownClass = (0, _classnames2.default)((_classNames2 = {}, _defineProperty(_classNames2, className, true), _defineProperty(_classNames2, baseClassName + '-root', true), _defineProperty(_classNames2, 'is-open', this.state.isOpen), _classNames2));\n\n      return _react2.default.createElement(\n        'div',\n        { className: dropdownClass },\n        _react2.default.createElement(\n          'div',\n          { className: baseClassName + '-control ' + disabledClass, onMouseDown: this.handleMouseDown.bind(this), onTouchEnd: this.handleMouseDown.bind(this) },\n          value,\n          _react2.default.createElement('span', { className: baseClassName + '-arrow' })\n        ),\n        menu\n      );\n    }\n  }]);\n\n  return Dropdown;\n}(_react.Component);\n\nDropdown.defaultProps = { baseClassName: 'Dropdown' };\nexports.default = Dropdown;\n"},"example":{"flatArrayExample.js":"import React, { Component } from 'react';\nimport Dropdown from '../index.js';\n\nconst options = [\n  'one', 'two', 'three'\n]\n\nclass FlatArrayExample extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selected: options[0]\n    }\n    this._onSelect = this._onSelect.bind(this);\n  }\n\n  _onSelect (option) {\n    console.log('You selected ', option.label)\n    this.setState({selected: option})\n  }\n\n  render () {\n    const defaultOption = this.state.selected\n    const placeHolderValue = typeof this.state.selected === 'string' ? this.state.selected : this.state.selected.label\n\n    return (\n      <section>\n        <h4>Flat Array Example </h4>\n        <Dropdown options={options} onChange={this._onSelect} value={defaultOption} placeholder=\"Select an option\" />\n        <div className='result'>\n          You selected\n          <strong> {placeHolderValue} </strong>\n        </div>\n\n        <section>\n          <h3>Options: </h3>\n          <div className='code'>\n            <pre>\n              {`\nconst options = [\n  'one', 'two', 'three'\n]\n              `}\n            </pre>\n          </div>\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default FlatArrayExample\n","index.html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-dropdown</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n","main.js":"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport FlatArrayExample from './flatArrayExample';\nimport ObjectArrayExample from './objectArrayExample';\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <header>\n          <h2><a href='https://github.com/fraserxu/react-dropdown'>React Dropdown</a></h2>\n        </header>\n        <section className='description'>\n          <p>\n            Simple Dropdown component for React, inspired by <a href='https://github.com/JedWatson/react-select'>react-select</a>\n          </p>\n          <div className='code'>\n            <pre>\n              { \"$ npm install react-dropdown --save\" }\n            </pre>\n          </div>\n        </section>\n\n        <section>\n          <h3>Examples: </h3>\n          <h4>Usage: </h4>\n          <div className='code'>\n            <pre>\n              {`\n<Dropdown options={options} onChange={this._onSelect} value={defaultOption} placeholder=\"Select an option\" />\n              `}\n            </pre>\n          </div>\n        </section>\n\n        <FlatArrayExample />\n        <ObjectArrayExample />\n\n        <section>\n          <h3>License: </h3>\n        </section>\n        <footer>\n          <p>MIT | Build for <a href='https://csviz.org'>CSViz</a> project @<a href='http://wiredcraft.com'>Wiredcraft</a></p>\n        </footer>\n      </div>\n\n    )\n  }\n\n}\n\nReactDOM.render(<App />, document.querySelector('#app'))\n","objectArrayExample.js":"import React, { Component } from 'react';\nimport Dropdown from '../index.js';\n\nclass ObjectArrayExample extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selected: { value: 'two', label: 'Two'}\n    }\n    this._onSelect = this._onSelect.bind(this)\n  }\n\n  _onSelect (option) {\n    console.log('You selected ', option.label)\n    this.setState({selected: option})\n  }\n\n  render () {\n    const options = [\n      { value: 'one', label: 'One' },\n      { value: 'two', label: 'Two' },\n      {\n       type: 'group', name: 'group1', items: [\n         { value: 'three', label: 'Three' },\n         { value: 'four', label: 'Four' }\n       ]\n      },\n      {\n       type: 'group', name: 'group2', items: [\n         { value: 'five', label: 'Five' },\n         { value: 'six', label: 'Six' }\n       ]\n      }\n    ]\n\n    const defaultOption = this.state.selected\n    const placeHolderValue = typeof this.state.selected === 'string' ? this.state.selected : this.state.selected.label\n\n    return (\n      <section>\n        <h4>Object Array Example </h4>\n        <Dropdown options={options} onChange={this._onSelect} value={defaultOption} placeholder=\"Select an option\" />\n        <div className='result'>\n          You selected\n          <strong> {placeHolderValue} </strong>\n        </div>\n        <section>\n          <h3>Options: </h3>\n          <div className='code'>\n            <pre>\n              {`\nconst options = [\n{ value: 'one', label: 'One' },\n{ value: 'two', label: 'Two' },\n{\n type: 'group', name: 'group1', items: [\n   { value: 'three', label: 'Three' },\n   { value: 'four', label: 'Four' }\n ]\n},\n{\n type: 'group', name: 'group2', items: [\n   { value: 'five', label: 'Five' },\n   { value: 'six', label: 'Six' }\n ]\n}\n]\n              `}\n            </pre>\n          </div>\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default ObjectArrayExample\n","style.css":"body {\n  margin: 20px auto;\n  width: 60%;\n}\n\nheader h2 {\n  text-align: center;\n  margin: 30px auto;\n}\n\npre {\n  background: #f7f7f7;\n  padding: 10px 20px;\n  border-radius: 2px;\n  border: 1px solid #ccc;\n}\n\npre code {\n  line-height: 20px;\n}\n\n.result {\n  padding: 8px 0;\n}\n\n.Dropdown-root {\n  position: relative;\n}\n\n.Dropdown-control {\n  position: relative;\n  overflow: hidden;\n  background-color: white;\n  border: 1px solid #ccc;\n  border-radius: 2px;\n  box-sizing: border-box;\n  color: #333;\n  cursor: default;\n  outline: none;\n  padding: 8px 52px 8px 10px;\n  transition: all 200ms ease;\n}\n\n.Dropdown-control:hover {\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n}\n\n.Dropdown-arrow {\n  border-color: #999 transparent transparent;\n  border-style: solid;\n  border-width: 5px 5px 0;\n  content: ' ';\n  display: block;\n  height: 0;\n  margin-top: -ceil(2.5);\n  position: absolute;\n  right: 10px;\n  top: 14px;\n  width: 0\n}\n\n.is-open .Dropdown-arrow {\n  border-color: transparent transparent #999;\n  border-width: 0 5px 5px;\n}\n\n.Dropdown-menu {\n  background-color: white;\n  border: 1px solid #ccc;\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n  box-sizing: border-box;\n  margin-top: -1px;\n  max-height: 200px;\n  overflow-y: auto;\n  position: absolute;\n  top: 100%;\n  width: 100%;\n  z-index: 1000;\n  -webkit-overflow-scrolling: touch;\n}\n\n.Dropdown-menu .Dropdown-group > .Dropdown-title {\n  padding: 8px 10px;\n  color: rgba(51, 51, 51, 1.2);\n  font-weight: bold;\n  text-transform: capitalize;\n}\n\n.Dropdown-option {\n  box-sizing: border-box;\n  color: rgba(51, 51, 51, 0.8);\n  cursor: pointer;\n  display: block;\n  padding: 8px 10px;\n}\n\n.Dropdown-option:last-child {\n  border-bottom-right-radius: 2px;\n   border-bottom-left-radius: 2px;\n}\n\n.Dropdown-option:hover {\n  background-color: #f2f9fc;\n  color: #333;\n}\n\n.Dropdown-option.is-selected {\n  background-color: #f2f9fc;\n  color: #333;\n}\n\n.Dropdown-noresults {\n  box-sizing: border-box;\n  color: #ccc;\n  cursor: default;\n  display: block;\n  padding: 8px 10px;\n}\n"},"index.d.ts":"declare module \"react-dropdown\" {\n  import * as React from \"react\";\n  export interface Option {\n    label: string;\n    value: string;\n  }\n  export interface Group {\n    type: \"group\";\n    name: string;\n    items: Option[];\n  }\n  interface ReactDropdownProps {\n    options: (Group | Option | string)[];\n    baseClassName?: string;\n    className?: string;\n    disabled?: boolean;\n    onChange?: (arg: Option) => void;\n    onFocus?: (arg: boolean) => void;\n    value?: Option;\n    placeholder?: String;\n  }\n\n  class ReactDropdown extends React.Component<ReactDropdownProps> {\n  }\n\n  export default ReactDropdown;\n}\n","index.js":"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\nconst DEFAULT_PLACEHOLDER_STRING = 'Select...';\n\nclass Dropdown extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selected: props.value || {\n        label: props.placeholder || DEFAULT_PLACEHOLDER_STRING,\n        value: ''\n      },\n      isOpen: false\n    }\n    this.mounted = true\n    this.handleDocumentClick = this.handleDocumentClick.bind(this)\n    this.fireChangeEvent = this.fireChangeEvent.bind(this)\n  }\n\n  componentWillReceiveProps (newProps) {\n    if (newProps.value && newProps.value !== this.state.selected) {\n      this.setState({selected: newProps.value})\n    } else if (!newProps.value) {\n      this.setState({selected: {\n        label: newProps.placeholder || DEFAULT_PLACEHOLDER_STRING,\n        value: ''\n      }})\n    }\n  }\n\n  componentDidMount () {\n    document.addEventListener('click', this.handleDocumentClick, false)\n    document.addEventListener('touchend', this.handleDocumentClick, false)\n  }\n\n  componentWillUnmount () {\n    this.mounted = false\n    document.removeEventListener('click', this.handleDocumentClick, false)\n    document.removeEventListener('touchend', this.handleDocumentClick, false)\n  }\n\n  handleMouseDown (event) {\n    if (this.props.onFocus && typeof this.props.onFocus === 'function') {\n      this.props.onFocus(this.state.isOpen)\n    }\n    if (event.type === 'mousedown' && event.button !== 0) return\n    event.stopPropagation()\n    event.preventDefault()\n\n    if (!this.props.disabled) {\n      this.setState({\n        isOpen: !this.state.isOpen\n      })\n    }\n  }\n\n  setValue (value, label) {\n    let newState = {\n      selected: {\n        value,\n        label\n      },\n      isOpen: false\n    }\n    this.fireChangeEvent(newState)\n    this.setState(newState)\n  }\n\n  fireChangeEvent (newState) {\n    if (newState.selected !== this.state.selected && this.props.onChange) {\n      this.props.onChange(newState.selected)\n    }\n  }\n\n  renderOption (option) {\n    let optionClass = classNames({\n      [`${this.props.baseClassName}-option`]: true,\n      'is-selected': option === this.state.selected\n    })\n\n    let value = option.value || option.label || option\n    let label = option.label || option.value || option\n\n    return (\n      <div\n        key={value}\n        className={optionClass}\n        onMouseDown={this.setValue.bind(this, value, label)}\n        onClick={this.setValue.bind(this, value, label)}>\n        {label}\n      </div>\n    )\n  }\n\n  buildMenu () {\n    let { options, baseClassName } = this.props\n    let ops = options.map((option) => {\n      if (option.type === 'group') {\n        let groupTitle = (<div className={`${baseClassName}-title`}>{option.name}</div>)\n        let _options = option.items.map((item) => this.renderOption(item))\n\n        return (\n          <div className={`${baseClassName}-group`} key={option.name}>\n            {groupTitle}\n            {_options}\n          </div>\n        )\n      } else {\n        return this.renderOption(option)\n      }\n    })\n\n    return ops.length ? ops : <div className={`${baseClassName}-noresults`}>No options found</div>\n  }\n\n  handleDocumentClick (event) {\n    if (this.mounted) {\n      if (!ReactDOM.findDOMNode(this).contains(event.target)) {\n        if (this.state.isOpen) {\n          this.setState({ isOpen: false })\n        }\n      }\n    }\n  }\n\n  render () {\n    const { baseClassName, className } = this.props\n\n    const disabledClass = this.props.disabled ? 'Dropdown-disabled' : ''\n    const placeHolderValue = typeof this.state.selected === 'string' ? this.state.selected : this.state.selected.label\n    let value = (<div className={`${baseClassName}-placeholder`}>{placeHolderValue}</div>)\n    let menu = this.state.isOpen ? <div className={`${baseClassName}-menu`}>{this.buildMenu()}</div> : null\n\n    let dropdownClass = classNames({\n      [className]: true,\n      [`${baseClassName}-root`]: true,\n      'is-open': this.state.isOpen\n    })\n\n    return (\n      <div className={dropdownClass}>\n        <div className={`${baseClassName}-control ${disabledClass}`} onMouseDown={this.handleMouseDown.bind(this)} onTouchEnd={this.handleMouseDown.bind(this)}>\n          {value}\n          <span className={`${baseClassName}-arrow`} />\n        </div>\n        {menu}\n      </div>\n    )\n  }\n}\n\nDropdown.defaultProps = { baseClassName: 'Dropdown' }\nexport default Dropdown\n","style.css":".Dropdown-root {\n  position: relative;\n}\n\n.Dropdown-control {\n  position: relative;\n  overflow: hidden;\n  background-color: white;\n  border: 1px solid #ccc;\n  border-radius: 2px;\n  box-sizing: border-box;\n  color: #333;\n  cursor: default;\n  outline: none;\n  padding: 8px 52px 8px 10px;\n  transition: all 200ms ease;\n}\n\n.Dropdown-control:hover {\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n}\n\n.Dropdown-arrow {\n  border-color: #999 transparent transparent;\n  border-style: solid;\n  border-width: 5px 5px 0;\n  content: ' ';\n  display: block;\n  height: 0;\n  margin-top: -ceil(2.5);\n  position: absolute;\n  right: 10px;\n  top: 14px;\n  width: 0\n}\n\n.is-open .Dropdown-arrow {\n  border-color: transparent transparent #999;\n  border-width: 0 5px 5px;\n}\n\n.Dropdown-menu {\n  background-color: white;\n  border: 1px solid #ccc;\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n  box-sizing: border-box;\n  margin-top: -1px;\n  max-height: 200px;\n  overflow-y: auto;\n  position: absolute;\n  top: 100%;\n  width: 100%;\n  z-index: 1000;\n  -webkit-overflow-scrolling: touch;\n}\n\n.Dropdown-menu .Dropdown-group > .Dropdown-title{\n  padding: 8px 10px;\n  color: rgba(51, 51, 51, 1);\n  font-weight: bold;\n  text-transform: capitalize;\n}\n\n.Dropdown-option {\n  box-sizing: border-box;\n  color: rgba(51, 51, 51, 0.8);\n  cursor: pointer;\n  display: block;\n  padding: 8px 10px;\n}\n\n.Dropdown-option:last-child {\n  border-bottom-right-radius: 2px;\n   border-bottom-left-radius: 2px;\n}\n\n.Dropdown-option:hover {\n  background-color: #f2f9fc;\n  color: #333;\n}\n\n.Dropdown-option.is-selected {\n  background-color: #f2f9fc;\n  color: #333;\n}\n\n.Dropdown-noresults {\n  box-sizing: border-box;\n  color: #ccc;\n  cursor: default;\n  display: block;\n  padding: 8px 10px;\n}\n","package.json":"{\n  \"name\": \"react-dropdown\",\n  \"version\": \"1.3.6\",\n  \"description\": \"React dropdown component\",\n  \"main\": \"dist/index.js\",\n  \"style\": \"style.css\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/fraserxu/react-dropdown.git\"\n  },\n  \"files\": [\n    \"dist/index.js\",\n    \"index.d.ts\",\n    \"style.css\"\n  ],\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"component\",\n    \"dropdown\",\n    \"select\"\n  ],\n  \"author\": {\n    \"name\": \"Fraser Xu\",\n    \"email\": \"xvfeng123@gmail.com\",\n    \"url\": \"https://fraserxu.me\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/fraserxu/react-dropdown/issues\"\n  },\n  \"homepage\": \"https://github.com/fraserxu/react-dropdown\",\n  \"dependencies\": {\n    \"classnames\": \"^2.2.3\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^0.14.7 || ^15.0.0-0 || ^16.0.0\",\n    \"react-dom\": \"^0.14.7 || ^15.0.0-0 || ^16.0.0\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"babelify\"\n    ]\n  },\n  \"babel\": {\n    \"presets\": [\n      \"react\",\n      \"es2015\",\n      \"stage-0\"\n    ]\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.18.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"babel-preset-stage-0\": \"^6.16.0\",\n    \"babelify\": \"^7.2.0\",\n    \"browserify\": \"^13.0.0\",\n    \"browserify-hmr\": \"^0.3.1\",\n    \"ecstatic\": \"^1.4.0\",\n    \"gh-pages\": \"^0.11.0\",\n    \"react\": \"^15.0.0\",\n    \"react-dom\": \"^15.0.0\",\n    \"standard\": \"^6.0.7\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"typings\": \"./index.d.ts\",\n  \"scripts\": {\n    \"build\": \"babel index.js -o dist/index.js\",\n    \"test\": \"standard index.js\",\n    \"watch\": \"watchify example/main.js -p browserify-hmr -o example/bundle.js -dv\",\n    \"start\": \"ecstatic -p 8080 example & npm run watch\",\n    \"prepublish\": \"npm test && npm run build\",\n    \"predeploy\": \"npm test && browserify example/main.js -o example/bundle.js\",\n    \"deploy\": \"gh-pages -d example\"\n  }\n}\n"},"lib":{"react":6,"react-dom":18,"classnames":32},"entry":"dist/index.js"}